    1  sudo apt-get upgrade
    2  sudo -i
    3  sudo apt update
    4  sudo apt dist-upgrade
    5  sudo -i
    6  sudo apt install ncdu
    7  ncdu /
    8  sudo -i
    9  sudo -i
   10  sudo ncdu /
   11  sudo -i
   12  ssh-keygen -t ed25519
   13  ssh-keygen --help
   14  ssh-keygen -t ed25519 -f ~/.ssh/id_ed25519
   15  sudo lxc list
   16  ssh elkmaster@10.118.138.97
   17  ssh-copy-id -i ~/.ssh/id_ed25519 elkmaster@10.118.138.97
   18  ssh-add
   19  ssh elkmaster@10.118.138.97
   20  lxc list
   21  sudo lxc list
   22  sudo lxc publish --alias ubuntu_ansible ubuntu1
   23  sudo lxc publish --alias ubuntu_ansible ubu-ansible
   24  sudo lxc launch ubuntu_ansible host1
   25  sudo lxc list
   26  ssh elkmaster@10.118.138.118
   27  sudo lxc delete --force host1 ubu-ansible
   28  sudo lxc image list
   29  sudo lxc image delete bb8c6962d018
   30  sudo lxc image list
   31  sudo ncdu /
   32  sudo su -
   33  ip addr
   34  sudo su -
   35  su -
   36  ls
   37  cat test.yaml 
   38  clear
   39  ls
   40  lxc list
   41  exit
   42  ssh-add 
   43  clear
   44  ssh-add
   45  ls -l .ssh/
   46  ssh-add
   47  exit
   48  ls
   49  git init
   50  lxc list
   51  sudo lxc list
   52  ansible all -m ping
   53  ansible host1 -m package -a name=ngnix state=present
   54  ansible host1 -m package -a name=nginx state=present
   55  ansible host1 -m package -a "name=nginx state=present"
   56  ansible host1 --become -m package -a "name=nginx state=present"
   57  ansible host1 -m package -a "name=nginx state=present"
   58  ansible host1 -m  --become --check systemd -a "name=nginx state=started"
   59  ansible host1  --become --check -m systemd -a "name=nginx state=started"
   60  ansible host1  --become --check -m systemd -a "name=nginx state=stopped"
   61  ansible host1  --become --check -m systemd -a "name=nginx state=started"
   62  ansible host1  --become --check -m systemd -a "name=nginx state=stopped"
   63  ansible host1  --become -m systemd -a "name=nginx state=started"
   64  ansible host1  --become --check -m systemd -a "name=nginx state=started"
   65  ansible host1  --become -m "command touch /tmp/file.txt"
   66  ansible host1  --become -m "command touch /tmp/file.txt" -a "/tmp/file.txt"
   67  ansible host1  --become -m "command touch /tmp/file.txt" -a "creates=/tmp/file.txt"
   68  su - 
   69  ssh-add 
   70  ssh elkmaster@10.118.138.230
   71  ansible all -m pin
   72  ansible all -m ping
   73  ssh elkmaster@10.118.138.230
   74  ansible all -m ping
   75  ssh elkmaster@10.118.138.230
   76  exit
   77  ansible all -m ping
   78  sudo lxc launch ubuntu_ansible app1
   79  ssh-add
   80  ssh elkmaster@app1
   81  lxc list
   82  ssh elkmaster@10.118.138.149
   83  exit
   84  su - 
   85  exit
   86  ansible-inventory --host app1
   87  ansible-inventory --host app2
   88  ansible-inventory --host app1
   89  ansible-playbook flaskhello_deploy.yml 
   90  ansible-inventory
   91  ansible-inventory --list
   92  ansible-playbook flaskhello_deploy.yml 
   93  ansible -m debug -a "msg={{hosts_vars}}"
   94  ansible -m debug -a "msg={{hostvars}}"
   95  ansible -m debug -a "msg ={{hostvars}}"
   96  ansible-playbook debug.yml
   97  ls
   98  ansible-playbook debug.yml
   99  ansible-playbook debug.yml >>app1Facts.log
  100  ansible -m debug -a "msg ={{ hostvars }}"
  101  ansible -m debug -a "msg={{ hostvars }}"
  102  ansible app1 -m debug -a "msg={{ hostvars }}"
  103  history 
  104  git add -A
  105  git commit -m "tp2 correction intermediaire"
  106  ansible-playbook loopsample.yml 
  107  ls
  108  mv flaskhello_deploy.yml flaskhello_deploy_precorrection.yml
  109  ansible-playbook flaskhello_deploy.yml 
  110  git add -A
  111  git commit -m "tp2 correction intermediaire  2"
  112  ansible-playbook flaskhello_deploy.yml 
  113  cd ..
  114  ls
  115  git clone app:
  116  git clone  https://github.com/e-lie/ansible_flask_tp2_correction
  117  ls
  118  ansible-playbook flaskapp_deploy.yml
  119  git add -A
  120  git commit -m "tp2 correction avec handlers"
  121  cd ..
  122  ls
  123  git clone  https://github.com/e-lie/ansible_flask_tp2_correction tp3
  124  sudo        ansible-playbook provision_lxd_infra.yml 
  125  lxc list 
  126  clear
  127  sudo ansible-playbook provision_lxd_infra.yml 
  128  ssh-add
  129  ssh elkmaster@10.118.138.121
  130  sudo ansible-playbook provision_lxd_infra.yml 
  131  ls
  132  ansible-galaxy install -r roles/requirements.yml -p roles
  133  clear
  134  ansible-playbook configuration.yml  --check
  135  ansible-playbook configuration.yml --check
  136  ansible-playbook configuration.yml
  137  ls
  138  ansible-playbook configuration.yml 
  139  clear
  140  git add -A
  141  git commit -m " final tp3"
  142  clear
  143  sudo su -
  144  ssh-add
  145  lxc list
  146  ssh elkmaster@10.118.138.149
  147  clear
  148  vim pdf.php
  149  php pdf.php 
  150  ls
  151  clear
  152  ls
  153  git init
  154  ls
  155  docker build -t identidock .
  156  docker ps
  157  docker images
  158  df -h
  159  git init && git add -A && git commit -m tp_compose_init
  160  ls
  161  docker login
  162  clear
  163  git add -A
  164  docker build -t identidock .
  165  sudo docker-compose up
  166  docker-compose up
  167  clear
  168  docker-compose -f docker-compose-prod.yml up
  169  ssh -i My_server_ADMIN_KEYS.pem ubuntu@ec2-18-222-114-81.us-east-2.compute.amazonaws.com
  170  ls -l
  171  chmod 700 *
  172  ssh -i My_server_ADMIN_KEYS.pem ubuntu@ec2-18-222-114-81.us-east-2.compute.amazonaws.com
  173  cd Téléchargements/
  174  ls
  175  cat info_OLAF.txt 
  176  clear
  177  cd
  178  vim history.save 
  179  cd ..
  180  ls
  181  exit
  182  ls
  183  unzip themeforest-tPsJFZtM-booklovers-publishing-house-book-store-wordpress-theme.zip 
  184  clear
  185  ls
  186  rm rf booklover
  187  mkdir bookslovers
  188  mv booklovers*.zip booklovers
  189  ls
  190  mv booklovers.zip booklovers-child.zip Licensing documentation.html bookslovers/
  191  clear
  192  ssh -i My_server_ADMIN_KEYS.pem ubuntu@
  193  ls
  194  cat info_OLAF.txt 
  195  ssh -i My_server_ADMIN_KEYS.pem ubuntu@ec2-18-222-114-81.us-east-2.compute.amazonaws.com
  196  ls
  197  ssh -i My_server_ADMIN_KEYS.pem ubuntu@ec2-18-222-114-81.us-east-2.compute.amazonaws.com
  198  ls
  199  ssh -i My_server_ADMIN_KEYS.pem ubuntu@ec2-18-222-114-81.us-east-2.compute.amazonaws.com
  200  exit
  201  ping 192.168.121.190
  202  ls
  203  cd Téléchargements/
  204  ssh -i My_server_ADMIN_KEYS.pem ubuntu@ec2-18-222-114-81.us-east-2.compute.amazonaws.com
  205  exit
  206  ssh elk-master@192.168.121.200
  207  scp -r cursus_janvier2020_docker_tp5_base/ elk-master@192.168.121.200:~/
  208  scp -r cursus_janvier2020_docker_tp5_base/ elk-master@192.168.121.200:/tmp
  209  exit
  210  docker-compose up --build 
  211  ls
  212  cd flaskapp_src/
  213  ls
  214  ls -l ../ansible/
  215  clear
  216  ls
  217  docker-compose up --build 
  218  docker build -t sande7/monster_icon:0.1 .
  219  docker images
  220  docker login && docker push sande7/monster_icon:0.1
  221  clear
  222  docker-compose rm
  223  clar
  224  clear
  225  docker service create --name monster_icon -p 9090:9090 --replicas 3 tecpi/monster_icon:0.1
  226  docker service rm monster_icon 
  227  docker ps
  228  docker service ls
  229  docker service ls -a
  230  docker service ls 
  231  clear
  232  echo ############ >>~/history.save 
  233  history 
  234  history >>~/history.save 
  235  cd ../swarm_stacks/
  236  clear
  237  ls
  238  docker stack deploy -c monster_icon_stack.yml monsterstack
  239  clear
  240  cd ..
  241  ls
  242  cd terraform/
  243  ls
  244  terraform init
  245  ls -la
  246  ls -l .terraform/
  247  ls -l .terraform/plugins/
  248  ls -l .terraform/plugins/linux_amd64/
  249  terraform plan
  250  terraform apply
  251  ls
  252  clear
  253  export ANSIBLE_TF_DIR=$(pwd)
  254  cd ../ansible
  255  ./inventory_terraform.pyfdf
  256  env
  257  env |grep TF
  258  ./inventory_terraform.py
  259  ls
  260  ./terraform-inventory.py 
  261  ls
  262  pwd
  263  ssh-add ~/.ssh/id_ssh_shared
  264  ansible -m ping
  265  ansible all -m ping
  266  ls
  267  cd roles/
  268  ls
  269  ansible-galaxy install -r roles/requirements.yml -p roles
  270  ls
  271  ansible-galaxy install -r requirements.yml -p roles
  272  cd ..
  273  ansible-playbook site_setup.yml 
  274  ansible-galaxy install -r roles/requirements.yml -p roles
  275  ansible-playbook site_setup.yml 
  276  ansible-inventory --host docker_swarm_manager
  277  ssh root@167.71.12.179
  278  cd ../terraform/
  279  terraform destroy
  280  git add -A
  281  git commit -m " fin de tp, all is ok"
  282  clear
  283  git pull
  284  clear
  285  git pull
  286  ansible swarm_nodes -m ping
  287  ./cluster.sh setup_full
  288  cd 
  289  ls
  290  cd cursus_janvier2020_docker_tp5_base/
  291  ls
  292  ssh-add ~/.ssh/id_ssh_shared
  293  ./cluster.sh setup_full
  294  ./cluster.sh destroy_infra
  295  cd ..
  296  cd cursus_janvier2020_docker_tp5_base/
  297  ls
  298  ansible-inventory --list
  299  cd ..
  300  cd cursus_janvier2020_docker_tp5_base/
  301  source .env 
  302  ansible-inventory --list
  303  cd ansible/
  304  ansible-inventory --list
  305  cd ..
  306  ./cluster.sh setup_full
  307  ansible-inventory --list
  308  ./cluster.sh destroy_infra
  309  ssh-add ~/.ssh/id_ssh_shared
  310  git checkout cursus-janvier2020-docker-tp5
  311  ./cluster.sh setup_full
  312  ls -l ~/.ssh/
  313  ssh-add ~/.ssh/id_ssh_shared
  314  ansible-inventory --list
  315  ./cluster.sh destroy_infra
  316  ./cluster.sh setup_full
  317  source .env 
  318  cd ansible/
  319  ansible all -m ping
  320  cd ..
  321  ./cluster.sh setup_all
  322  ./cluster.sh setup_full
  323  ansible-inventory --list
  324  source .env 
  325  ansible-inventory --list
  326  ansible all -m ping
  327  ansible-inventory --list
  328  cd ansible/
  329  ls
  330  ansible-inventory --list
  331  ./cluster.sh destroy_infra
  332  cd ..
  333  ./cluster.sh destroy_infra
  334  sudo su -
  335  ls
  336  git clone https://github.com/e-lie/id_ssh_shared.git
  337  l
  338  cd id_ssh_shared/
  339  code . &
  340  git clone https://github.com/e-lie/cursus_janvier2020_docker_tp5_base
  341  ls
  342  cd ..
  343  git clone https://github.com/e-lie/cursus_janvier2020_docker_tp5_base
  344  cd cursus_janvier2020_docker_tp5_base/
  345  ls
  346  code . &
  347  docker images
  348  clear
  349  docker swarm init
  350  ls
  351  cd
  352  ls
  353  history 
  354  history  >>history.save
  355  clear
  356  ip addr
  357  clear
  358  ls
  359  cat lient.txt 
  360  ls
  361  cat id_ssh_shared/
  362  ls id_ssh_shared/
  363  rm -fr id_ssh_shared/cursus_janvier2020_docker_tp5_base/
  364  ls
  365  cd id_ssh_shared/
  366  ls
  367  cp  * ~/.ssh/
  368  ls -l ~/.ssh
  369  chmod 700 ~/.ssh/*
  370  ls -l ~/.ssh
  371  chmod 600 ~/.ssh/*
  372  ls -l ~/.ssh
  373  Hostname: a49b860a7e29
  374  ssh-add ~/.ssh/id_ssh_shared
  375  echo trucmuch42 >>~/history.save 
  376  cd
  377  wget https://github.com/nbering/terraform-provider-ansible/releases/download/v1.0.3/terraform-provider-ansible-linux_amd64.zip
  378  ls
  379  ls -lh
  380  mkdir -p ~/.terraform.d/plugins
  381  unzip ./terraform-provider-ansible-linux_amd64.zip -d ~/.terraform.d/plugins/
  382  ls -lha
  383  ls -lha .terraform.d/
  384  ls -lha .terraform.d/plugins/
  385  ls -lha .terraform.d/plugins/linux_amd64/
  386  ls
  387  ls
  388  cd Téléchargements/
  389  ls
  390  ssh -i My_server_ADMIN_KEYS.pem ubuntu@ec2-18-222-114-81.us-east-2.compute.amazonaws.com
  391  ssh -i My_server_ADMIN_KEYS.pem ubuntu@ec2-18-222-114-81.us-east-2.compute.amazonaws.com
  392  sudo su -
  393  microk8s.config
  394  exec bash
  395  history 
  396  sudo su -
  397  microk8s.config
  398  sudo usermod -a -G microk8s $USER
  399  echo "deb https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee -a /etc/apt/sources.list.d/kubernetes.list
  400  sudo apt update && sudo apt install -y kubectl
  401  kubectl version --short
  402  ls
  403  ls -la
  404  ls ~/.kube/config
  405  microk8s.config
  406  sudo usermod -a -G microk8s elk-master
  407  microk8s.config
  408  bash
  409  microk8s.config 
  410  groups
  411  sudo usermod -a -G microk8s elk-master
  412  groups
  413  sudo vim /etc/groups
  414  sudo vim /etc/group
  415  sudo microk8s.config 
  416  sudo kubectl version --short
  417  microk8s.config > ~/.kube/config
  418  sudo microk8s.config > ~/.kube/config
  419  >~/.kube/config
  420  mkdir .kube
  421  sudo microk8s.config > ~/.kube/config
  422  sudo kubectl version --short
  423  sudo apt install bash-completion
  424  source <(kubectl completion bash)
  425  echo "source <(kubectl completion bash)" >> ${HOME}/.bashrc
  426  microk8s.kubectl get nodes
  427  sudo microk8s.kubectl get nodes
  428  kubectl get nodes 
  429  kubectl describe nodes/elkmaster 
  430  kubectl get all
  431  sudo kubectl get all
  432  kubectl get all
  433  sudo su -
  434  ssh -i My_server_ADMIN_KEYS.pem ubuntu@ec2-18-222-114-81.us-east-2.compute.amazonaws.com
  435  cd Téléchargements/
  436  ssh -i My_server_ADMIN_KEYS.pem ubuntu@ec2-18-222-114-81.us-east-2.compute.amazonaws.com
  437  ls
  438  cd
  439  clear
  440  git clone https://github.com/e-lie/cursus_janvier2020_tp1_k8s
  441  ls
  442  ssh -i My_server_ADMIN_KEYS.pem ubuntu@ec2-18-222-114-81.us-east-2.compute.amazonaws.com
  443  cd Téléchargements/
  444  ssh -i My_server_ADMIN_KEYS.pem ubuntu@ec2-18-222-114-81.us-east-2.compute.amazonaws.com
  445  ssh -i My_server_ADMIN_KEYS.pem ubuntu@ec2-18-222-114-81.us-east-2.compute.amazonaws.com
  446  ls
  447  cd portefolia/
  448  ls
  449  cd theme/
  450  ls
  451  scp -i My_server_ADMIN_KEYS.pem selfer* ubuntu@ec2-18-222-114-81.us-east-2.compute.amazonaws.com:/var/www/kouata-pro/wp-content/themes/
  452  scp -i ~/Téléchargements/My_server_ADMIN_KEYS.pem selfer* ubuntu@ec2-18-222-114-81.us-east-2.compute.amazonaws.com:/var/www/kouata-pro/wp-content/themes/
  453  scp -i ~/Téléchargements/My_server_ADMIN_KEYS.pem selfer* ubuntu@ec2-18-222-114-81.us-east-2.compute.amazonaws.com:/tmp
  454  terraform init
  455  ls
  456  cd terraform/
  457  terraform init
  458  terraform plan
  459  terraform apply
  460  ls
  461  cd terraform/
  462  ls
  463  kc cluster-info
  464  kubectl expose deployment microbot --type=NodePort --port=80 --name=microbot-modibo
  465  kc cluster-info
  466  kubectl get services
  467  kc cluster-info
  468  terraform apply -auto-approve > output
  469  terraform apply -auto-approve
  470  kubectl get services
  471  kubectl create deployment microbot-kouata --image=dontrebootme/microbot:v1
  472  kubectl expose deployment microbot-kouata --type=NodePort --port=80 --name=microbot-service
  473  kubectl expose deployment microbot-kouata --type=NodePort --port=80 --name=microbot-kouata
  474  kubectl get services
  475  cd Téléchargements/
  476  ssh -i My_server_ADMIN_KEYS.pem ubuntu@ec2-18-222-114-81.us-east-2.compute.amazonaws.com
  477  cd Téléchargements/
  478  ssh -i My_server_ADMIN_KEYS.pem ubuntu@ec2-18-222-114-81.us-east-2.compute.amazonaws.com
  479  ls
  480  microk8s.config 
  481  l
  482  vim monitor.sh
  483  sudo apt install inotify-tools
  484  ls
  485  chmod +x monitor.sh 
  486  ls -l
  487  sudo ./monitor.sh Images/
  488  vim monitor.sh 
  489  sudo ./monitor.sh Images/toto/
  490  cat monitor.sh 
  491  cd 
  492  cd Téléchargements/
  493  ls
  494  clear
  495  ssh -i My_server_ADMIN_KEYS.pem ubuntu@ec2-18-222-114-81.us-east-2.compute.amazonaws.com
  496  cd Images/
  497  mkdir toto
  498  cd toto/
  499  >test
  500  ls -l
  501  ls -ld ../toto/
  502  ssh -i My_server_ADMIN_KEYS.pem ubuntu@ec2-18-222-114-81.us-east-2.compute.amazonaws.com
  503  ls
  504  wget https://kubernetes.io/examples/application/wordpress/mysql-deployment.yaml
  505  ls
  506  wget https://kubernetes.io/examples/application/wordpress/wordpress-deployment.yaml
  507  ls -l
  508  cat <<EOF >./kustomization.yaml
  509  secretGenerator:
  510  - name: mysql-pass
  511    literals:
  512    - password=YOUR_PASSWORD
  513  EOF
  514  cat <<EOF >>./kustomization.yaml
  515  resources:
  516  - mysql-deployment.yaml
  517  - wordpress-deployment.yaml
  518  EOF
  519  kubectl apply -k ./
  520  kubectl get secrets
  521  kubectl get pods
  522  kubectl get services wordpress
  523  clear
  524  kubectl delete -k ./
  525  kubectl get services wordpress
  526  kubectl get pods
  527  microk8s.enable storage
  528  sudo microk8s.enable storage
  529  kubectl apply -k ./
  530  kc get services
  531  kc top nodes
  532  kc top pods
  533  cat ~/.bashrc 
  534  clear
  535  sudo microk8s.enable fluentd
  536  ssh -i My_server_ADMIN_KEYS.pem ubuntu@ec2-18-222-114-81.us-east-2.compute.amazonaws.com
  537  cd Téléchargements/
  538  ssh -i My_server_ADMIN_KEYS.pem ubuntu@ec2-18-222-114-81.us-east-2.compute.amazonaws.com
  539  ls
  540  git commit -m " avant jenkins tp"
  541  git add -A
  542  git commit -m " avant jenkins tp"
  543  helm ls
  544  ls
  545  cd ..
  546  ls
  547  cd Jenkins-tp/
  548  ls
  549  kc apply -f jenkins-ingress.yaml 
  550  kc delete -f jenkins-ingress.yaml 
  551  kc apply -f jenkins-ingress.yaml 
  552  kc get services
  553  clear
  554  kc apply -f jenkins-ingress.yaml 
  555  helm upgrade -f config_jenkins.yaml jenkins-tp codecentric/jenkins
  556  kc get services
  557  kc delete -f jenkins-ingress.yaml 
  558  kc get services
  559  helm upgrade -f config_jenkins.yaml jenkins-tp codecentric/jenkins
  560  kc get services
  561  kubectl exec jenkins-tp-master cat /var/jenkins_home/secrets/initialAdminPassword
  562  kubectl exec jenkins-tp cat /var/jenkins_home/secrets/initialAdminPassword
  563  kc get svc
  564  helm ls
  565  helm delete jenkins-tp
  566  helm ls
  567  helm upgrade -f config_jenkins.yaml jenkins-tp codecentric/jenkins
  568  kc apply -f jenkins-ingress.yaml 
  569  history >history.txt
